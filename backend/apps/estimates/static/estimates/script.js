/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º (1, 2 –∏–ª–∏ 3).
 * –°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ.
 */
function goToScreen(screenNumber) {
  const screens = document.querySelectorAll(".screen");
  screens.forEach(screen => {
    screen.classList.remove("active");
  });
  const target = document.getElementById(`screen-${screenNumber}`);
  if (target) {
    target.classList.add("active");
  }
}

function toggleStageDetails(id) {
  const details = document.getElementById(`details-${id}`);
  const arrow = document.getElementById(`arrow-${id}`);
  if (!details || !arrow) return;
  
  if (details.style.display === "none" || details.style.display === "") {
    details.style.display = "block";
    arrow.textContent = "‚ñ≤";
  } else {
    details.style.display = "none";
    arrow.textContent = "‚ñº";
  }
}

function openAddStageModal() {
  document.getElementById('addStageModal').style.display = 'block';
}

function closeAddStageModal() {
  document.getElementById('addStageModal').style.display = 'none';
}

function addStage(event) {
  event.preventDefault();
  const sname = document.getElementById('stage-name').value;
  const sduration = document.getElementById('stage-duration').value;
  const scost = document.getElementById('stage-cost').value;
  alert(`–≠—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω: ${sname} (–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${sduration} –¥–Ω, –°—Ç–æ–∏–º–æ—Å—Ç—å: ${scost} ‚Ç∏)`);
  closeAddStageModal();
  return false;
}

// –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
function openMaterialForm(stageIndex) {
  // stageIndex –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ forloop.counter0, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–±–∞–≤–ª—è–µ–º 1
  document.getElementById('material-stage-index').value = parseInt(stageIndex, 10);
  document.getElementById('materialModal').style.display = 'block';
}

// –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
function closeMaterialForm() {
  document.getElementById('materialModal').style.display = 'none';
}

// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç
function openWorkForm(stageIndex) {
  document.getElementById('work-stage-index').value = parseInt(stageIndex, 10);
  document.getElementById('workModal').style.display = 'block';
}

function closeWorkForm() {
  document.getElementById('workModal').style.display = 'none';
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä)
function addMaterial(event) {
  event.preventDefault();
  const stageIndex0 = document.getElementById('material-stage-index').value;
  // –ü–µ—Ä–µ–≤–æ–¥–∏–º forloop.counter0 –≤ forloop.counter, –ø—Ä–∏–±–∞–≤–ª—è—è 1
  const stageIndex = parseInt(stageIndex0, 10) + 1;
  const name = document.getElementById('material-name').value;
  const qty = parseFloat(document.getElementById('material-quantity').value);
  const unit = document.getElementById('material-unit').value;
  const price = parseFloat(document.getElementById('material-price').value);
  const total = qty * price;

  // –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
  const tableBody = document.querySelector(`#details-${stageIndex} .materials-table tbody`);

  if (tableBody) {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${name}</td>
        <td>${qty.toFixed(2)}</td>
        <td>${unit}</td>
        <td>${price.toFixed(2)} ‚Ç∏</td>
        <td><strong>${total.toFixed(2)} ‚Ç∏</strong></td>
      `;
      tableBody.appendChild(tr);
      alert(`–î–æ–±–∞–≤–ª–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: ${name}, —Å—É–º–º–∞ = ${total.toFixed(2)} ‚Ç∏`);
  } else {
      alert('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞ index=' + stageIndex);
  }
  closeMaterialForm();
  return false;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã (–ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä)
function addWork(event) {
  event.preventDefault();
  const stageIndex0 = document.getElementById('work-stage-index').value;
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º to integer –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º 1, —Ç–∞–∫ –∫–∞–∫ id –¥–µ—Ç–∞–ª–µ–π —ç—Ç–∞–ø–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ details-{{ forloop.counter }}
  const stageIndex = parseInt(stageIndex0, 10) + 1;
  const wname = document.getElementById('work-name').value;
  const whours = parseFloat(document.getElementById('work-hours').value);
  const wcost = parseFloat(document.getElementById('work-cost').value);
  const wtotal = whours * wcost;
  
  // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞–±–æ—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
  const tableBody = document.querySelector(`#details-${stageIndex} .works-table tbody`);
  
  if (tableBody) {
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${wname}</td>
      <td>${whours.toFixed(2)}</td>
      <td>${wcost.toFixed(2)} ‚Ç∏</td>
      <td><strong>${wtotal.toFixed(2)} ‚Ç∏</strong></td>
    `;
    tableBody.appendChild(tr);
    alert(`–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞: ${wname}, —Å—É–º–º–∞ = ${wtotal.toFixed(2)} ‚Ç∏`);
  } else {
    alert('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞–±–æ—Ç –¥–ª—è —ç—Ç–∞–ø–∞ index=' + stageIndex);
  }
  
  closeWorkForm();
  return false;
}
// ==== —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –∏ —ç—Ç–∞–ø–æ–≤ ====

/**
 * –í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Ä–∞–±–æ—Ç—ã (–ø–æ –æ–±—Ä–∞–∑—Ü—É –ø–µ—Ä–≤–æ–π).
 */
function addWorkRow(btn) {
  const tbody = btn.closest('.stage-block').querySelector('.works-table tbody');
  const firstRow = tbody.querySelector('tr');
  const newRow = firstRow.cloneNode(true);
  // –æ—á–∏—Å—Ç–∏–º –ø–æ–ª—è
  newRow.querySelector('.work-name').value = '';
  newRow.querySelector('.work-hours').value = '0';
  newRow.querySelector('.work-cost').value = '0';
  newRow.querySelector('.work-total').textContent = '0¬†‚Ç∏';
  tbody.appendChild(newRow);
  totalRecalc();
}

/**
 * –í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞.
 */
function addMaterialRow(btn) {
  const tbody = btn.closest('.stage-block').querySelector('.materials-table tbody');
  const firstRow = tbody.querySelector('tr');
  const newRow = firstRow.cloneNode(true);
  newRow.querySelector('.material-name').value = '';
  newRow.querySelector('.material-quantity').value = '0';
  newRow.querySelector('.material-unit').value = '';
  newRow.querySelector('.material-price').value = '0';
  newRow.querySelector('.material-total').textContent = '0¬†‚Ç∏';
  tbody.appendChild(newRow);
  totalRecalc();
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç.
 */
function deleteRow(btn) {
  const tr = btn.closest('tr');
  tr.parentNode.removeChild(tr);
  totalRecalc();
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤–µ—Å—å —ç—Ç–∞–ø (–∫–∞—Ä—Ç–æ—á–∫—É) –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å—é —Å–º–µ—Ç—É.
 */
function deleteStage(btn) {
  const stage = btn.closest('.estimate-stage');
  stage.parentNode.removeChild(stage);
  totalRecalc();
}

/**
 * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É.
 */
function totalRecalc() {
  let grandTotal = 0;
  document.querySelectorAll('.estimate-stage').forEach(stage => {
    let stageSum = 0;
    // —Ä–∞–±–æ—Ç—ã
    stage.querySelectorAll('.works-table tbody tr').forEach(tr => {
      const h = parseFloat(tr.querySelector('.work-hours').value) || 0;
      const c = parseFloat(tr.querySelector('.work-cost').value) || 0;
      const t = h * c;
      tr.querySelector('.work-total').textContent = t.toLocaleString('ru-RU',{minimumFractionDigits:2}) + '¬†‚Ç∏';
      stageSum += t;
    });
    // –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    stage.querySelectorAll('.materials-table tbody tr').forEach(tr => {
      const q = parseFloat(tr.querySelector('.material-quantity').value) || 0;
      const p = parseFloat(tr.querySelector('.material-price').value) || 0;
      const t = q * p;
      tr.querySelector('.material-total').textContent = t.toLocaleString('ru-RU',{minimumFractionDigits:2}) + '¬†‚Ç∏';
      stageSum += t;
    });
    // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª—è —ç—Ç–∞–ø–∞
    const disp = stage.querySelector('.stage-cost-display');
    disp.textContent = stageSum.toLocaleString('ru-RU',{minimumFractionDigits:2}) + '¬†‚Ç∏';
    stage.querySelector('.stage-cost-input').value = stageSum.toFixed(2);
    grandTotal += stageSum;
  });
  // –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
  document.getElementById('total-display').textContent =
    grandTotal.toLocaleString('ru-RU',{minimumFractionDigits:2}) + '¬†‚Ç∏';
  document.getElementById('total-cost').value = grandTotal.toFixed(2);
}

// –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –∫ –ª—é–±–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
document.body.addEventListener('input', e => {
  if (e.target.closest('.cost-table')) totalRecalc();
});

// –≤—ã–ø–æ–ª–Ω—è–µ–ºÂàù–∏—á–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', totalRecalc);
/**
 * Combined script for estimate detail page.
 * Handles accordion toggles, dynamic row add/remove, auto-textarea grow,
 * emoji icons, and real-time recalculation of stage and total sums.
 */

document.addEventListener("DOMContentLoaded", () => {
  // Auto‚Äëgrow for textarea inputs
  document.querySelectorAll('.input--autoGrow').forEach(el => {
    autoGrow(el);
    el.addEventListener('input', () => autoGrow(el));
  });

  // Inject appropriate emoji for each stage
  const emojiMap = [
    [/–ø–ª–∞–Ω/i,        "üóÇÔ∏è"],
    [/–¥–µ–º–æ–Ω—Ç–∞–∂/i,    "ü™ö"],
    [/–ø–µ—Ä–µ–ø–ª–∞–Ω/i,    "üèóÔ∏è"],
    [/–∏–Ω–∂–µ–Ω–µ—Ä/i,     "üîß"],
    [/—á–µ—Ä–Ω–æ–≤/i,      "üß±"],
    [/—á–∏—Å—Ç–æ–≤/i,      "üé®"],
    [/–º–µ–±–µ–ª|–¥–µ–∫–æ—Ä/i, "üõãÔ∏è"]
  ];
  document.querySelectorAll(".stage-emoji").forEach(span => {
    const title = span.dataset.stage || "";
    const found = emojiMap.find(([re]) => re.test(title));
    span.textContent = found ? found[1] : "üì¶";
  });

  // Initial total calculation
  totalRecalc();

  // Recalculate whenever any input inside a cost-table changes
  document.body.addEventListener('input', e => {
    if (e.target.closest('.cost-table')) {
      totalRecalc();
    }
  });
});

/**
 * Expand a textarea height to fit its content.
 */
function autoGrow(el) {
  el.style.height = "auto";
  el.style.height = el.scrollHeight + "px";
}

/**
 * Toggle accordion details for a stage.
 */
function toggleStageDetails(id) {
  const details = document.getElementById(`details-${id}`);
  const arrow = document.getElementById(`arrow-${id}`);
  if (!details || !arrow) return;
  const open = details.style.display === "block";
  details.style.display = open ? "none" : "block";
  arrow.textContent = open ? "‚ñº" : "‚ñ≤";
}

/**
 * Add a new work row by cloning the first existing row.
 */
function addWorkRow(btn) {
  const tbody = btn.closest('.stage-block').querySelector('.works-table tbody');
  const firstRow = tbody.querySelector('tr');
  const newRow = firstRow.cloneNode(true);
  newRow.querySelector('.work-name').value = '';
  newRow.querySelector('.work-hours').value = '0';
  newRow.querySelector('.work-cost').value = '0';
  newRow.querySelector('.work-total').textContent = '0¬†‚Ç∏';
  tbody.appendChild(newRow);
  totalRecalc();
}

/**
 * Add a new material row by cloning the first existing row.
 */
function addMaterialRow(btn) {
  const tbody = btn.closest('.stage-block').querySelector('.materials-table tbody');
  const firstRow = tbody.querySelector('tr');
  const newRow = firstRow.cloneNode(true);
  newRow.querySelector('.material-name').value = '';
  newRow.querySelector('.material-quantity').value = '0';
  newRow.querySelector('.material-unit').value = '';
  newRow.querySelector('.material-price').value = '0';
  newRow.querySelector('.material-total').textContent = '0¬†‚Ç∏';
  tbody.appendChild(newRow);
  totalRecalc();
}

/**
 * Delete a single work or material row and recalculate.
 */
function deleteRow(btn) {
  const tr = btn.closest('tr');
  if (tr) {
    tr.remove();
    totalRecalc();
  }
}

/**
 * Delete an entire stage card and recalculate total.
 */
function deleteStage(btn) {
  const stage = btn.closest('.estimate-stage');
  if (stage) {
    stage.remove();
    totalRecalc();
  }
}

/**
 * Recalculate each stage sum and the grand total.
 */
function totalRecalc() {
  let grandTotal = 0;
  document.querySelectorAll('.estimate-stage').forEach(stage => {
    let stageSum = 0;

    // Sum works
    stage.querySelectorAll('.works-table tbody tr').forEach(tr => {
      const h = parseFloat(tr.querySelector('.work-hours').value) || 0;
      const c = parseFloat(tr.querySelector('.work-cost').value) || 0;
      const t = h * c;
      tr.querySelector('.work-total').textContent = t.toLocaleString('ru-RU', { minimumFractionDigits: 2 }) + '¬†‚Ç∏';
      stageSum += t;
    });

    // Sum materials
    stage.querySelectorAll('.materials-table tbody tr').forEach(tr => {
      const q = parseFloat(tr.querySelector('.material-quantity').value) || 0;
      const p = parseFloat(tr.querySelector('.material-price').value) || 0;
      const t = q * p;
      tr.querySelector('.material-total').textContent = t.toLocaleString('ru-RU', { minimumFractionDigits: 2 }) + '¬†‚Ç∏';
      stageSum += t;
    });

    // Update stage display and hidden input
    stage.querySelector('.stage-cost-display').textContent = stageSum.toLocaleString('ru-RU', { minimumFractionDigits: 2 }) + '¬†‚Ç∏';
    const hiddenInput = stage.querySelector('.stage-cost-input');
    if (hiddenInput) hiddenInput.value = stageSum.toFixed(2);

    grandTotal += stageSum;
  });

  // Update grand total display and hidden input
  const totalDisplay = document.getElementById('total-display');
  if (totalDisplay) {
    totalDisplay.textContent = grandTotal.toLocaleString('ru-RU', { minimumFractionDigits: 2 }) + '¬†‚Ç∏';
  }
  const totalInput = document.getElementById('total-cost');
  if (totalInput) {
    totalInput.value = grandTotal.toFixed(2);
  }
}